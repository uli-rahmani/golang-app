// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces/repo.go

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	domain "saturday/domain"
)

// MockRepo is a mock of Repo interface
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// SaveComment mocks base method
func (m *MockRepo) SaveComment(orgsName, comment string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveComment", orgsName, comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveComment indicates an expected call of SaveComment
func (mr *MockRepoMockRecorder) SaveComment(orgsName, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveComment", reflect.TypeOf((*MockRepo)(nil).SaveComment), orgsName, comment)
}

// GetComment mocks base method
func (m *MockRepo) GetComment(orgsName string) ([]*domain.OrgsCommentBody, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComment", orgsName)
	ret0, _ := ret[0].([]*domain.OrgsCommentBody)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComment indicates an expected call of GetComment
func (mr *MockRepoMockRecorder) GetComment(orgsName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComment", reflect.TypeOf((*MockRepo)(nil).GetComment), orgsName)
}

// DeleteComment mocks base method
func (m *MockRepo) DeleteComment(orgsName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", orgsName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComment indicates an expected call of DeleteComment
func (mr *MockRepoMockRecorder) DeleteComment(orgsName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockRepo)(nil).DeleteComment), orgsName)
}

// GetMember mocks base method
func (m *MockRepo) GetMember(orgsName string) ([]*domain.GetMemberResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMember", orgsName)
	ret0, _ := ret[0].([]*domain.GetMemberResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMember indicates an expected call of GetMember
func (mr *MockRepoMockRecorder) GetMember(orgsName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMember", reflect.TypeOf((*MockRepo)(nil).GetMember), orgsName)
}
